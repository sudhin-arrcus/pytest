<?xml version="1.0" encoding="utf-8"?>
<method xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="emulation_dhcp_control" name_robot="Emulation Dhcp Control" displayPriority="3" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="true" ixNetworkCpfPythonScriptgenSupport="false" ixNetworkCpfPerlApiSupport="true" ixNetworkCpfPerlScriptgenSupport="false" ixNetworkCpfTclApiSupport="true" ixNetworkCpfTclScriptgenSupport="false" ixNetworkCpfRobotApiSupport="true" ixNetworkCpfRobotScriptgenSupport="false" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" Lang="none">
  <description supportType="ixNetworkSupport" contentType="noContent" target="noTarget" />
  <description supportType="ixLoadSupport" contentType="noContent" target="noTarget" />
  <description supportType="ixHalOrProtocolSupport" contentType="noContent" target="noTarget" />
  <description supportType="ixNetworkCpfSupport" contentType="new" target="noTarget">This procedure starts, stops, and restarts the DHCP emulation client on the specified port.</description>
  <chapter>DHCP Client APIs</chapter>
  <arguments>
    <argument name="port_handle" definedBy="ciscoDefined" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="true" ixNetworkCpfPythonScriptgenSupport="supportedInOtherCommand" ixNetworkCpfPerlApiSupport="true" ixNetworkCpfPerlScriptgenSupport="supportedInOtherCommand" ixNetworkCpfTclApiSupport="true" ixNetworkCpfTclScriptgenSupport="supportedInOtherCommand" ixNetworkCpfRobotApiSupport="true" ixNetworkCpfRobotScriptgenSupport="supportedInOtherCommand" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" lang="false">
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkCpfSupport contentType="new" target="noTarget" mandatory="false">
        <description>
          <text>Specifies the port handle upon which emulation is configured.  
        Emulation must have been previously enabled on the specified port 
        via a call to emulation_dhcp_group_config proc.</text>
        </description>
        <restriction type="VALUETYPE" valueType="ANY" />
      </ixNetworkCpfSupport>
      <ixLoadSupport contentType="noContent" target="noTarget" mandatory="false" />
    </argument>
    <argument name="handle" definedBy="ciscoDefined" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="true" ixNetworkCpfPythonScriptgenSupport="supportedInOtherCommand" ixNetworkCpfPerlApiSupport="true" ixNetworkCpfPerlScriptgenSupport="supportedInOtherCommand" ixNetworkCpfTclApiSupport="true" ixNetworkCpfTclScriptgenSupport="supportedInOtherCommand" ixNetworkCpfRobotApiSupport="true" ixNetworkCpfRobotScriptgenSupport="supportedInOtherCommand" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" lang="false">
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkCpfSupport contentType="new" target="noTarget" mandatory="false">
        <description>
          <text>Allows the user to optionally select the groups to which the 
        specified action is to be applied.
        If this parameter is not specified, then the specified action is 
        applied to all groups configured on the port specified by 
        the -port_handle command. The handle is obtained from the keyed list returned 
        in the call to emulation_dhcp_group_config proc.
        The port handle parameter must have been initialized and dhcp group 
        emulation must have been configured prior to calling this function.</text>
        </description>
        <restriction type="VALUETYPE" valueType="ANY" />
      </ixNetworkCpfSupport>
      <ixLoadSupport contentType="noContent" target="noTarget" mandatory="false" />
    </argument>
    <argument name="no_write" definedBy="CiscoDefinedNotSupported" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="false" ixNetworkCpfPythonScriptgenSupport="false" ixNetworkCpfPerlApiSupport="false" ixNetworkCpfPerlScriptgenSupport="false" ixNetworkCpfTclApiSupport="false" ixNetworkCpfTclScriptgenSupport="false" ixNetworkCpfRobotApiSupport="false" ixNetworkCpfRobotScriptgenSupport="false" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" lang="false">
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkCpfSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixLoadSupport contentType="noContent" target="noTarget" mandatory="false" />
    </argument>
    <argument name="request_rate" definedBy="CiscoDefinedNotSupported" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="false" ixNetworkCpfPythonScriptgenSupport="false" ixNetworkCpfPerlApiSupport="false" ixNetworkCpfPerlScriptgenSupport="false" ixNetworkCpfTclApiSupport="false" ixNetworkCpfTclScriptgenSupport="false" ixNetworkCpfRobotApiSupport="false" ixNetworkCpfRobotScriptgenSupport="false" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" lang="false">
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkCpfSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixLoadSupport contentType="noContent" target="noTarget" mandatory="false" />
    </argument>
    <argument name="ping_destination" definedBy="ixiaDefined" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="true" ixNetworkCpfPythonScriptgenSupport="supportedInOtherCommand" ixNetworkCpfPerlApiSupport="true" ixNetworkCpfPerlScriptgenSupport="supportedInOtherCommand" ixNetworkCpfTclApiSupport="true" ixNetworkCpfTclScriptgenSupport="supportedInOtherCommand" ixNetworkCpfRobotApiSupport="true" ixNetworkCpfRobotScriptgenSupport="supportedInOtherCommand" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" lang="false">
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkCpfSupport contentType="new" target="noTarget" mandatory="false">
        <description>
          <text>Specifies the ip destination for ping.</text>
        </description>
        <restriction type="VALUETYPE" valueType="IP" />
      </ixNetworkCpfSupport>
      <ixLoadSupport contentType="noContent" target="noTarget" mandatory="false" />
    </argument>
    <argument name="action" definedBy="ciscoDefined" ixHalOrProtocolPythonApiSupport="false" ixHalOrProtocolPythonScriptgenSupport="false" ixHalOrProtocolPerlApiSupport="false" ixHalOrProtocolPerlScriptgenSupport="false" ixHalOrProtocolTclApiSupport="false" ixHalOrProtocolTclScriptgenSupport="false" ixLoadPythonApiSupport="false" ixLoadPythonScriptgenSupport="false" ixLoadPerlApiSupport="false" ixLoadPerlScriptgenSupport="false" ixLoadTclApiSupport="false" ixLoadTclScriptgenSupport="false" ixNetworkCpfPythonApiSupport="true" ixNetworkCpfPythonScriptgenSupport="true" ixNetworkCpfPerlApiSupport="true" ixNetworkCpfPerlScriptgenSupport="true" ixNetworkCpfTclApiSupport="true" ixNetworkCpfTclScriptgenSupport="true" ixNetworkCpfRobotApiSupport="true" ixNetworkCpfRobotScriptgenSupport="true" ixNetworkPythonApiSupport="false" ixNetworkPythonScriptgenSupport="false" ixNetworkPerlApiSupport="false" ixNetworkPerlScriptgenSupport="false" ixNetworkTclApiSupport="false" ixNetworkTclScriptgenSupport="false" ixNetworkRobotApiSupport="false" ixNetworkRobotScriptgenSupport="false" lang="false">
      <ixHalOrProtocolSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkSupport contentType="noContent" target="noTarget" mandatory="false" />
      <ixNetworkCpfSupport contentType="new" target="noTarget" mandatory="false">
        <description>
          <text>Action to take on the specified handle.
        The parameters specified in the emulation_dhcp_group_config proc 
        are used to control the bind/renew/release rates.</text>
          <choices>
            <choice>
              <choiceName>bind</choiceName>
              <choiceText>starts the discover/request message transmission.</choiceText>
            </choice>
            <choice>
              <choiceName>release</choiceName>
              <choiceText>causes the system to issue release message for all currently bound subscribers.</choiceText>
            </choice>
            <choice>
              <choiceName>renew</choiceName>
              <choiceText>issues a renew request for all currently bound subscribers.This option is a Cisco option.</choiceText>
            </choice>
            <choice>
              <choiceName>abort</choiceName>
              <choiceText>aborts the DHCP sessions for a DHCP emulation. The command                          
              returns when the operation is completed. This option is valid only using IxTclNetwork.</choiceText>
            </choice>
            <choice>
              <choiceName>abort_async</choiceName>
              <choiceText>aborts the DHCP sessions for a DHCP emulation. The command                          
              returns immediately and the operation is executed in the backgronud. This option is valid only using IxTclNetwork.</choiceText>
            </choice>
            <choice>
              <choiceName>restart_down</choiceName>
              <choiceText>restart the sessions that are down</choiceText>
            </choice>
            <choice>
              <choiceName>rebind</choiceName>
              <choiceText>rebind</choiceText>
            </choice>
            <choice>
              <choiceName>send_ping</choiceName>
              <choiceText>send ping to the specified address</choiceText>
            </choice>
            <choice>
              <choiceName>start_relay_agent</choiceName>
              <choiceText>starts the dhcp relay agent stack</choiceText>
            </choice>
            <choice>
              <choiceName>stop_relay_agent</choiceName>
              <choiceText>stops the dhcp relay agent stack</choiceText>
            </choice>
            <choice>
              <choiceName>send_arp</choiceName>
              <choiceText>send arp to its gateway address</choiceText>
            </choice>
          </choices>
        </description>
        <restriction type="VALUETYPE" valueType="CHOICES" value="bind release renew abort abort_async restart_down rebind send_ping start_relay_agent stop_relay_agent send_arp" />
        <restriction type="DEFAULT" valueType="ANY" value="bind" />
      </ixNetworkCpfSupport>
      <ixLoadSupport contentType="noContent" target="noTarget" mandatory="false" />
    </argument>
  </arguments>
  <returnValues>
    <returnValue definedBy="ciscoDefined" supportType="ixNetworkCpfSupport">
      <key>status</key>
      <value>$::SUCCESS | $::FAILURE</value>
      <tag value="" />
    </returnValue>
    <returnValue definedBy="ciscoDefined" supportType="ixNetworkCpfSupport">
      <key>log</key>
      <value>When status is failure, contains more information</value>
      <tag value="" />
    </returnValue>
  </returnValues>
  <sampleInput>
    <sampleInputElem supportType="ixNetworkCpfSupport" />
  </sampleInput>
  <sampleOutput>
    <sampleOutputElem supportType="ixNetworkCpfSupport" />
  </sampleOutput>
  <notes>
    <note supportType="ixNetworkCpfSupport"> </note>
  </notes>
  <seeAlso>
    <seeAlsoElem supportType="ixNetworkCpfSupport" />
  </seeAlso>
  <examples>
    <example supportType="ixNetworkCpfSupport" />
  </examples>
  <code_examples>
    <example lang="tcl" supportType="ixNetworkCpfSupport"><![CDATA[
# Command :- ::ixiangpf::emulation_dhcp_control

# This command can be used to run action bind on dhcp client

set control_status [::ixiangpf::emulation_dhcp_control 	\
	-handle     <dhcp_clienthandle> 	       	\
	-action     bind                         	\
]

# This command will generate output as given
# {status 1}


# This command can be used to run action release on dhcp client
set control_status [::ixiangpf::emulation_dhcp_control 	\
	-handle     <dhcp_clienthandle> 		\
	-action     release				\
]

# This command will generate output as given
# {status 1}
    ]]></example>
    <example lang="python" supportType="ixNetworkCpfSupport"><![CDATA[
# Command :- ixiangpf.emulation_dhcp_control
# This command can be used to run action bind on dhcp client

status = ixiangpf.emulation_dhcp_control(
    handle                                                      = "<dhcp_clienthandle>",
    action                                                      = "bind",
)
# This command will generate output as given
# {status 1}
# This command can be used to run action release on dhcp client

status = ixiangpf.emulation_dhcp_control(
    handle                                                      = "<dhcp_clienthandle>",
    action                                                      = "release",
)
# This command will generate output as given
# {status 1}

    ]]></example>
    <example lang="perl" supportType="ixNetworkCpfSupport"><![CDATA[
# Command :- ixiangpf::emulation_dhcp_control

# This command can be used to run action bind on dhcp client
my $control_status = ixiangpf::emulation_dhcp_control ({
    handle                                                      => "<dhcp_clienthandle>",
    action                                                      => "bind",
});

# This command will generate output as given
# {status 1}

# This command can be used to run action release on dhcp client

my $control_status = ixiangpf::emulation_dhcp_control ({
    handle                                                      => "<dhcp_clienthandle>",
    action                                                      => "release",
});
# This command will generate output as given
# {status 1}	
    ]]></example>
    <example lang="robot" supportType="ixNetworkCpfSupport"><![CDATA[
# Command :- Emulation Dhcp Control
# This command can be used to run action bind on dhcp client

   ${result} =  Emulation Dhcp Control  handle=<dhcp_clienthandle>   action=bind  
   ${status} =  Get From Dictionary  ${result}  status
   Run Keyword If  '${status}' != '1'  FAIL  "Error: Status is not SUCCESS"  ELSE  Log  "Status is SUCCESS"
   ${control_status} =  Get From Dictionary  ${result}  control_status

# This command will generate output as given
# {status 1}
# This command can be used to run action release on dhcp client

   ${result} =  Emulation Dhcp Control  handle=<dhcp_clienthandle>   action=release  
   ${status} =  Get From Dictionary  ${result}  status
   Run Keyword If  '${status}' != '1'  FAIL  "Error: Status is not SUCCESS"  ELSE  Log  "Status is SUCCESS"
   ${control_status} =  Get From Dictionary  ${result}  control_status

# This command will generate output as given
# {status 1}
    ]]></example>
  </code_examples>
</method>